// Generated by view binder compiler. Do not edit!
package com.vesam.barexamlibrary.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.LinearLayout;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.Toolbar;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewpager.widget.ViewPager;
import com.vesam.barexamlibrary.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentPaymentBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final LinearLayout linearLayout;

  @NonNull
  public final LinearLayout lnDots;

  @NonNull
  public final LinearLayout lnPayment;

  @NonNull
  public final ViewPager pagerSlider;

  @NonNull
  public final Toolbar toolbar;

  private FragmentPaymentBinding(@NonNull ConstraintLayout rootView,
      @NonNull LinearLayout linearLayout, @NonNull LinearLayout lnDots,
      @NonNull LinearLayout lnPayment, @NonNull ViewPager pagerSlider, @NonNull Toolbar toolbar) {
    this.rootView = rootView;
    this.linearLayout = linearLayout;
    this.lnDots = lnDots;
    this.lnPayment = lnPayment;
    this.pagerSlider = pagerSlider;
    this.toolbar = toolbar;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentPaymentBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentPaymentBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_payment, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentPaymentBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.linearLayout;
      LinearLayout linearLayout = rootView.findViewById(id);
      if (linearLayout == null) {
        break missingId;
      }

      id = R.id.lnDots;
      LinearLayout lnDots = rootView.findViewById(id);
      if (lnDots == null) {
        break missingId;
      }

      id = R.id.lnPayment;
      LinearLayout lnPayment = rootView.findViewById(id);
      if (lnPayment == null) {
        break missingId;
      }

      id = R.id.pagerSlider;
      ViewPager pagerSlider = rootView.findViewById(id);
      if (pagerSlider == null) {
        break missingId;
      }

      id = R.id.toolbar;
      Toolbar toolbar = rootView.findViewById(id);
      if (toolbar == null) {
        break missingId;
      }

      return new FragmentPaymentBinding((ConstraintLayout) rootView, linearLayout, lnDots,
          lnPayment, pagerSlider, toolbar);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
